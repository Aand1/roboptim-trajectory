# Copyright (C) 2009 by Thomas Moulard, AIST, CNRS, INRIA.        -*-Autotest-*-
#
# This file is part of the roboptim.
#
# roboptim is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roboptim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with roboptim.  If not, see <http://www.gnu.org/licenses/>.

m4_include([autotest.at])

## ----------------------- ##
## Launch the test suite.  ##
## ----------------------- ##

AT_INIT([Main test suite])
AT_COPYRIGHT(
[Copyright (C) 2009 Thomas Moulard, AIST, CNRS, INRIA
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.])

AT_BANNER([Simple tests])
CHECK_STDOUT([simple], [Check basic features.])
CHECK_STDOUT([spline], [Check Spline class.])
CHECK_STDOUT([spline-gradient], [Check Spline gradient.])
CHECK_STDOUT([free-time-trajectory], [Check free time trajectory.])
CHECK_STDOUT([free-time-trajectory-stable-time-point],
	     [Check free time trajectory (using stable time points).])
CHECK_STDOUT([state-function], [Check state function.])
CHECK_STDOUT([fixed-point-state-function], [Check fixed point state function.])

AT_BANNER([Optimization (require solver plug-in)])
CHECK_STDOUT([spline-optimization], [Optimize a Spline with Cfsqp.],
	     [! test x$HAVE_ROBOPTIM_CORE_CFSQP_PLUGIN = xyes])
CHECK_STDOUT([spline-bicycle-optim], [Optimize a Spline with Cfsqp (2).],
	     [! test x$HAVE_ROBOPTIM_CORE_CFSQP_PLUGIN = xyes])
CHECK_STDOUT([spline-time-optimization], [Optimize a free time trajectory.],
	     [! test x$HAVE_ROBOPTIM_CORE_CFSQP_PLUGIN = xyes])

AT_BANNER([Long tests (disabled unless ALL_TESTS=1)])
# Do ``ALL_TESTS=1 make check'' to run those tests,
# expect one to three minutes per test case.

 CHECK_STDOUT([anthropomorphic-cost-function-case-1],
	[Optimize using anthropomorphic cost function (case 1).],
	[! test 1 -eq "$ALL_TESTS"])
 CHECK_STDOUT([anthropomorphic-cost-function-case-2],
	[Optimize using anthropomorphic cost function (case 2).],
	[! test 1 -eq "$ALL_TESTS"])
 CHECK_STDOUT([anthropomorphic-cost-function-case-3],
	[Optimize using anthropomorphic cost function (case 3).],
	[! test 1 -eq "$ALL_TESTS"])
 CHECK_STDOUT([anthropomorphic-cost-function-case-4],
	[Optimize using anthropomorphic cost function (case 4).],
	[! test 1 -eq "$ALL_TESTS"])
 CHECK_STDOUT([anthropomorphic-cost-function-case-5],
	[Optimize using anthropomorphic cost function (case 5).],
	[! test 1 -eq "$ALL_TESTS"])
 CHECK_STDOUT([anthropomorphic-cost-function-case-6],
	[Optimize using anthropomorphic cost function (case 6).],
	[! test 1 -eq "$ALL_TESTS"])

# End of testsuite.at
